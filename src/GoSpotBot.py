import telebot
from DataBot import calculate_result
from DataBot import QUESTIONS
from DataBot import SPORT_INFO
from telebot import types


bot = telebot.TeleBot('7711818193:AAFbgLcy9n11H8eif-gSX4eHtvZQVsvS3qo')
user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    bot.set_my_commands([
        types.BotCommand("/start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("/reset", "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ")])

    kb = types.InlineKeyboardMarkup(row_width=1)
    bt1 = types.InlineKeyboardButton(text="–°–∞–π—Ç GoSpot", url='https://timely-rabanadas-f0fcfa.netlify.app/')
    bt2 = types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test')
    kb.add(bt1, bt2)

    bot.send_message(message.chat.id,
        "üèÑ‚Äç‚ôÇÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GoSpot Bot!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–æ–¥–Ω—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –≤–∞—Å.\n",
        #"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=kb,
        parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: call.data == 'start_test')
def start_test_call(call):
    chat_id = call.message.chat.id
    user_data[chat_id] = {'answers': {}, 'current_question': 0}
    bot.send_message(call.message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!')
    send_question(chat_id)

def send_question(chat_id):
    question_data = QUESTIONS[user_data[chat_id]['current_question']]
    kb = types.InlineKeyboardMarkup()
    for i, option in enumerate(question_data['options']):
        kb.add(types.InlineKeyboardButton(
            text=option,
            callback_data=f"q{user_data[chat_id]['current_question']}_a{i}"))
    bot.send_message(chat_id, question_data['text'], reply_markup=kb)



@bot.callback_query_handler(func=lambda call: True)
def handle_answer(call):
    chat_id = call.message.chat.id
    question_index = user_data[chat_id]['current_question']
    user_data[chat_id]['answers'][question_index] = call.data

    if question_index < len(QUESTIONS)-1:
        user_data[chat_id]['current_question'] += 1
        send_question(chat_id)

    else:
        final_results = calculate_result(user_data[chat_id]['answers'])
        formatted_results = ", ".join(final_results)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É

        kb = types.InlineKeyboardMarkup(row_width=1)
        bt1 = types.InlineKeyboardButton(text="GoSpot", url='https://timely-rabanadas-f0fcfa.netlify.app/')
        kb.add(bt1)

        bot.send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!üåü\n\n–í–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç: {formatted_results}")

        sport_info = ''
        for sport in final_results:
            sport_info += format_sport_info(sport)
            sport_info += '\n - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n\n'

        bot.send_message(chat_id, text = sport_info, parse_mode='Markdown')
        bot.send_message(chat_id,'üëâ–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–∏—Ö –≤–∏–¥–∞—Ö –≤–æ–¥–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞, '
                                 '–∞ —Ç–∞–∫ –∂–µ –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ GoSpot!\n\n'
                                 '‚ö°–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /reset', reply_markup=kb)
def format_sport_info(sport):
    info = SPORT_INFO[sport]
    message = f"{info['emoji']} *{sport}*\n\n{info['description']}\n\n"
    message += "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n" + "\n".join(f"- {k}: {v}" for k, v in info['key_features'].items())
    message += "\n\n‚úÖ *–ü–æ–ª—å–∑–∞:*\n" + "\n".join(info['benefits'])
    message += f"\n\nüéØ *–°–æ–≤–µ—Ç—ã –Ω–æ–≤–∏—á–∫–∞–º:*\n" + "\n".join(info['training_tips'])
    message += f"\n\nüí° *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:* {info['fact']}"
    return message

@bot.message_handler(commands=['reset'])
def reset_test(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}

    kb = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test')
    kb.add(button)

    bot.send_message(message.chat.id,'–î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ!', reply_markup=kb)

bot.polling()